#!/bin/tcsh -f
# Tyler Blazey, Summer 2011

#Check for dependencies
if ( ! -e $FSLDIR ) then
	echo "Set FSLDIR before running script"
	exit 1
endif
if ( ! -e $FREESURFER_HOME ) then
	echo "Set FREESURFER_HOME before running script"
	exit 1
endif

#Usage
set program = $0:t
if ( $#argv == 0 ) then
	echo ""
	echo "${program}: A basic processing script for ACS ASL"
	echo ""
	echo "Usage:"
	echo ""
	echo "Required Arguments:"
	echo "	-r1: First Asl run."
	echo "	-r2: Second Asl run."
	echo "	-tse: Turbo spin echo image."
	echo " 	-subj: Freesurfer subject ID."
	echo "	-out: Root for outputed files."
	echo ""
	echo "Optional Arguments:"
	echo '	-subjdir: Set FreeSurfer subjects directory. Default is current $SUBJECTS_DIR.'
	echo "	-simple: Do simple subtraction. Default is sinc."
	echo "	-unfilt: Output CBF data with and without outlier removal."
	echo "	-mthresh: Threshold for mean perfusion outliers. Default is 2.5."
	echo "  -sthresh: Threshold for standard deviation perfusion outliers. Default is 1.5"
	echo "	-kernel: Size of regression kernel for partial volume correction. Default is 5.0."
	echo "	-nocsf: Assume that there is no perfusion in CSF for partial volume correction."
	echo "	-out4d:	Output a 4d cbf image."
	echo "	-fwhm: FWHM for surface smoothing. Default is 5."
	echo "	-force: Run command even if output exists."
	echo "	-gthresh: Threshold for gray matter mask. Default is .3"
	echo "	-roithresh: Threshold for ROI sampling. Default is 1.5"
	echo ""
	echo "Note: Script requires FSL, FreeSurfer, Numpy, and Nibabel"
	exit
endif

#Set defaults
set mthresh = 2.5; set fwhm = 5; set simple = 0; set avgperf = 0; set out4d = ""; set unfilt = "";
set kernel = 5; set nocsf = ""; set force = 0; set gthresh = 0.3; set sthresh = 1.5;
set roithresh = 1.5;

#Parse arguments
set args = ( $argv )
while ( $#argv > 0 )
	set flag = $argv[1]; shift;
	switch ( $flag )
		case -r1:
			set run1 = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -r2:
			set run2 = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -tse:
			set tse = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -subj:
			set subject = $argv[1]; shift; breaksw;
		case -out:
			set out = $argv[1]; shift; breaksw;
		case -mthresh:
			set mthresh = $argv[1]; shift; breaksw;
		case -sthresh:
			set sthresh = $argv[1]; shift; breaksw;
		case -fwhm:
			set fwhm = $argv[1]; shift; breaksw;
		case -simple:
			set simple = 1; breaksw;
		case -out4d:
			set out4d = "-out4d"; breaksw;
		case -unfilt:
			set unfilt = "-unfilt"; breaksw;
		case -kernel:
				set kernel = $argv[1]; shift; breaksw;
			endif
		case -nocsf:
			set nocsf = "-nocsf"; breaksw;
		case -subjdir:
			if ( ! -d $argv[1] ) then
				echo "Cannot find directory $argv[1]."
				exit 1
			else
				setenv SUBJECTS_DIR $argv[1]; shift; breaksw;
			endif
		case -force:
			set force = 1; breaksw;
		case -gthresh:
			set gthresh = $argv[1]; shift; breaksw;
		case -roithresh:
			set roithresh = $argv[1]; shift; breaksw;
		default:
			"Option $flag not recognized. See usage"
			exit 1
	endsw
end

#Check to make sure all required options have been set
if ( $?run1 == 0 || $?run2 == 0 || $?subject == 0 || $?out == 0 ) then
	echo "Missing required arguments. See usage."
	exit 1
endif

#Check to see subject is within SUBJECTS_DIR
if ( ! -e $SUBJECTS_DIR/$subject ) then
	echo "Cannot find Subject: $subject within SUBJECTS_DIR: $SUBJECTS_DIR"
	exit 1
endif

#Make sure there is an fsaverage in the SUBJECTS_DIR
if ( ! -e $SUBJECTS_DIR/fsaverage ) then
	ln -s $FREESURFER_HOME/subjects/fsaverage $SUBJECTS_DIR/fsaverage
endif

#Create log file
set log = ${out}_${program}.log
if ( ! -e $log ) then
	touch $log
	set runnum = 1
else
	set oldruns = `grep -c "Run Number:" $log`
	set runnum = `echo "$oldruns + 1" | bc`
endif
if ( $runnum > 1 ) then
	echo ""|& tee -a $log
endif
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "Program: ${program}" |& tee -a $log
echo "Run Number: $runnum" |& tee -a $log
echo "Outroot: $out" |& tee -a $log
echo "Start Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "User: `whoami`" |& tee -a $log
echo "System Info: `uname -a`" |& tee -a $log
echo "Working Directory `pwd`" |& tee -a $log
echo "Input arguments: $args" |& tee -a $log
echo "FREESURFER_HOME: $FREESURFER_HOME" |& tee -a $log
echo "Freesurfer Version: `more $FREESURFER_HOME/build-stamp.txt`" |& tee -a $log
echo "SUBJECTS_DIR: $SUBJECTS_DIR" |& tee -a $log
echo "FSLDIR: $FSLDIR" |& tee -a $log
echo "FSL Version: `more $FSLDIR/etc/fslversion`" |& tee -a $log
echo "" | & tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log

#Collate the two runs
if ( ! -e ${out}_asl_col.nii.gz || $force == 1 ) then
	set cmd = ( python ~/Documents/scripts/collate.py ${run1}.nii.gz ${run2}.nii.gz ${out}_asl_col )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Extract the collate m0
if ( ! -e ${out}_asl_col_m0.nii.gz || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/fslroi ${out}_asl_col ${out}_asl_col_m0 0 1 )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

if ( ! -e ${out}_tse_to_asl_col_m0.nii.gz || $force == 1 ) then
	#Register tse to collated m0
	set cmd = ( $FSLDIR/bin/flirt -in ${tse} -ref ${out}_asl_col_m0 -dof 6 -cost mutualinfo )
	set cmd = ( $cmd -omat ${out}_tse_to_asl_col_m0.mat -nosearch )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
	
	#Resample tse
	set cmd = ( $FSLDIR/bin/applywarp -i ${tse} -r ${out}_asl_col_m0 -o ${out}_tse_to_asl_col_m0 )
	set cmd = ( $cmd --premat=${out}_tse_to_asl_col_m0.mat --super --superlevel=4 --interp=spline )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Split the resliced tse like the original asl runs
if ( ! -e ${out}_tse_1.nii.gz || ! -e ${out}_tse_2.nii.gz || $force == 1 ) then	
	set cmd = ( python ~/Documents/scripts/split.py ${out}_tse_to_asl_col_m0.nii.gz ${out}_tse )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

@ count = 1
foreach run ( $run1 $run2 )

	#Within run motion correction
	if ( ! -e  ${out}_asl_${count}_mcf.nii.gz || ! -e ${out}_asl_${count}_mcf.mat \
			|| ! -e ${out}_asl_${count}_mcf.par || ! -e ${out}_asl_${count}_mcf_abs.rms \
			|| ! -e ${out}_asl_${count}_mcf_rel.rms || $force == 1 ) then
		set cmd = ( $FSLDIR/bin/mcflirt -in $run -mats -plots -rmsrel -rmsabs -refvol 0 )
		set cmd = ( $cmd -out ${out}_asl_${count}_mcf )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
	endif
	
	#Create Rotation plot
	if ( ! -e  ${out}_asl_${count}_rot.png || $force == 1 ) then	
		#Create rotation plots
		set cmd = ( $FSLDIR/bin/fsl_tsplot -i ${out}_asl_${count}_mcf.par -w 640 -h 144 ) 
		set cmd = ( $cmd -a x,y,z -u 1 --start=1 --finish=3 -o ${out}_asl_${count}_rot.png )
		echo $cmd -t 'Estimated Rotations (radians)' |& tee -a $log
		$cmd -t 'Estimated Rotations (radians)' |& tee -a $log
	endif
		
	#Create translation plots
	if ( ! -e  ${out}_asl_${count}_trans.png || $force == 1 ) then
		set cmd = ( $FSLDIR/bin/fsl_tsplot -i ${out}_asl_${count}_mcf.par -u 1 --start=4 )
		set cmd = ( $cmd --finish=6 -a x,y,z  -w 640 -h 144 -o ${out}_asl_${count}_trans.png )
		echo $cmd -t 'Estimated Translations (mm)' |& tee -a $log
		$cmd -t 'Estimated Translations (mm)' |& tee -a $log
	endif
	
	#Create displacement plots
	if ( ! -e ${out}_asl_${count}_disp.png || $force == 1 ) then
		set cmd = ( $FSLDIR/bin/fsl_tsplot )
		set cmd = ( $cmd -i ${out}_asl_${count}_mcf_abs.rms,${out}_asl_${count}_mcf_rel.rms )
		set cmd = ( $cmd -u 1 -w 640 -h 144 -o ${out}_asl_${count}_disp.png -a abs,rel )
		echo $cmd -t 'Estimated Displacements (mm)'  |& tee -a $log
		$cmd -t 'Estimated Displacements (mm)' |& tee -a $log
	endif
	
	#Extract the reference frame
	if ( ! -e ${out}_asl_${count}_m0.nii.gz || $force == 1 ) then
		 set cmd = ( $FSLDIR/bin/fslroi $run ${out}_asl_${count}_m0 0 1 )
		 echo $cmd |& tee -a $log
		 $cmd |& tee -a $log
	endif
	
	#Run between run alignment using the split tse as a reference		 
	if ( ! -e  ${out}_asl_${count}_m0.nii.gz || ! -e ${out}_asl_${count}_m0_to_tse_${count}.mat \
			|| $force == 1 ) then
		set cmd = ( $FSLDIR/bin/flirt -in ${out}_asl_${count}_m0 -ref ${out}_tse_${count} )
		set cmd = ( $cmd -omat ${out}_asl_${count}_m0_to_tse_${count}.mat -dof 6 -nosearch )
		set cmd = ( $cmd -cost mutualinfo -out ${out}_asl_${count}_m0_to_tse_${count} )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
	endif
	
	#Apply motion correction
	if ( ! -e ${out}_asl_${count}_mc.nii.gz || $force == 1 ) then
		#Split the raw run
		set cmd = ( $FSLDIR/bin/fslsplit $run -t )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
		
		#Apply between and within run motion correction in one step
		foreach vol ( vol*.nii.gz )
			set num = `echo $vol | sed 's/vol//g' | sed 's/.nii.gz//g'`
			set cmd = ( $FSLDIR/bin/applywarp -i $vol -o ${vol:r:r}_transformed -r $vol )
			set cmd = ( $cmd --premat=${out}_asl_${count}_mcf.mat/MAT_${num} )
			set cmd = ( $cmd --postmat=${out}_asl_${count}_m0_to_tse_${count}.mat --interp=sinc )
			echo $cmd |& tee -a $log
		 	$cmd |& tee -a $log
		end
		
		#Merge the transformed volumes
		set cmd = ( $FSLDIR/bin/fslmerge -t ${out}_asl_${count}_mc vol*_transformed*.nii.gz )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
		
		#Delete the volumes
		set cmd = ( rm vol*.nii.gz )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
	endif
	
	@ count++
end

#Collate the motion corrected images
if ( ! -e ${out}_asl_col_mc.nii.gz || $force == 1 ) then
	set cmd = ( python ~/Documents/scripts/collate.py ${out}_asl_1_mc.nii.gz )
	set cmd = ( $cmd ${out}_asl_2_mc.nii.gz ${out}_asl_col_mc )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Extract collated, motion corrected m0
if ( ! -e ${out}_asl_col_mc_m0.nii.gz || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/fslroi ${out}_asl_col_mc ${out}_asl_col_mc_m0 0 1 )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Extract collated, motion tags and controls
if ( ! -e ${out}_asl_col_mc_tc.nii.gz || $force == 1 ) then
	set nvols = `$FSLDIR/bin/fslval ${out}_asl_col_mc dim4`
	set tcvols = `echo "$nvols - 1" | bc`
	set cmd = ( $FSLDIR/bin/fslroi ${out}_asl_col_mc ${out}_asl_col_mc_tc 1 $tcvols )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Get a ASL brainmask
if ( ! -e ${out}_asl_col_mc_m0_brain_mask.nii.gz || ! -e  ${out}_asl_col_mc_m0_brain.nii.gz \
		|| $force == 1 ) then 
	set cmd = ( $FSLDIR/bin/bet ${out}_asl_col_mc_m0 ${out}_asl_col_mc_m0_brain -R -f 0.4 -m -n )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif


if ( ! -e ${out}_orig_masked.nii.gz || $force == 1 ) then
	#Get a brain masked orig image
	set cmd = ( $FREESURFER_HOME/bin/mri_mask ${SUBJECTS_DIR}/${subject}/mri/orig.mgz )
	set cmd = ( $cmd ${SUBJECTS_DIR}/${subject}/mri/brainmask.mgz ${out}_orig_brain_masked.nii.gz )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
	
	#Use mri_gcut to get more agressive masking
	set cmd = ( $FREESURFER_HOME/bin/mri_gcut ${out}_orig_brain_masked.nii.gz )
	set cmd = ( $cmd ${out}_orig_masked.nii.gz )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
endif

#Get orig mask
if ( ! -e ${out}_orig_mask.nii.gz || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/fslmaths ${out}_orig_masked -bin ${out}_orig_mask )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Register ASL to FreeSurfer T1
if ( ! -e ${out}_asl_col_mc_m0_brain_to_orig_masked.nii.gz \
		|| ! -e ${out}_asl_col_mc_m0_brain_to_orig_masked.mat || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/flirt -in ${out}_asl_col_mc_m0_brain -ref ${out}_orig_masked -dof 6 )
	set cmd = ( $cmd -omat ${out}_asl_col_mc_m0_brain_to_orig_masked.mat )
	set cmd = ( $cmd -out ${out}_asl_col_mc_m0_brain_to_orig_masked -cost mutualinfo )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Invert ASL->Freesurfer to get Freesurfer->ASL
if ( ! -e ${out}_orig_masked_to_asl_col_mc_m0_brain.mat || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/convert_xfm -omat ${out}_orig_masked_to_asl_col_mc_m0_brain.mat )
	set cmd = ( $cmd -inverse ${out}_asl_col_mc_m0_brain_to_orig_masked.mat )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Convert ASL->Freesurfer to FreeSurfer format
if ( ! -e ${out}_asl_col_mc_m0_brain_to_orig_masked.reg || $force == 1 ) then
	#Convert ASL->Freesurfer
	set cmd = ( $FREESURFER_HOME/bin/tkregister2_cmdl --mov ${out}_asl_col_mc_m0_brain.nii.gz  )
	set cmd = ( $cmd --targ ${out}_orig_masked.nii.gz --s $subject )
	set cmd = ( $cmd --fsl ${out}_asl_col_mc_m0_brain_to_orig_masked.mat )
	set cmd = ( $cmd --reg ${out}_asl_col_mc_m0_brain_to_orig_masked.reg )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Convert Freesurfer->Asl to FreeSurfer Format
if ( ! -e ${out}_orig_masked_to_asl_col_mc_m0_brain.reg || $force == 1 ) then
	#Convert Freesurfer->ASL
	set cmd = ( $FREESURFER_HOME/bin/tkregister2_cmdl --targ ${out}_asl_col_mc_m0_brain.nii.gz )
	set cmd = ( $cmd --s $subject --mov ${out}_orig_masked.nii.gz )
	set cmd = ( $cmd --fsl ${out}_orig_masked_to_asl_col_mc_m0_brain.mat )
	set cmd = ( $cmd --reg ${out}_orig_masked_to_asl_col_mc_m0_brain.reg )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log
endif

#Get partial volume maps
if ( ! -e ${out}_orig_masked_pve_0.nii.gz || ! -e  ${out}_orig_masked_pve_1.nii.gz \
		|| ! -e ${out}_orig_masked_pve_2.nii.gz || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/fast -g ${out}_orig_masked.nii.gz )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
endif

#Resample partial volume maps into ASL space
foreach pve ( 0 1 2 )
	if ( ! -e ${out}_orig_masked_pve_${pve}_to_asl_col_mc_m0_brain.nii.gz || $force == 1 ) then
		set cmd = ( $FSLDIR/bin/applywarp --in=${out}_orig_masked_pve_${pve} )
		set cmd = ( $cmd --ref=${out}_asl_col_mc_m0_brain --super --superlevel=4 --interp=spline )
		set cmd = ( $cmd --premat=${out}_orig_masked_to_asl_col_mc_m0_brain.mat )
		set cmd = ( $cmd --out=${out}_orig_masked_pve_${pve}_to_asl_col_mc_m0_brain.nii.gz )
		set cmd = ( $cmd --mask=${out}_asl_col_mc_m0_brain_mask )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log	
	endif
end

#Create a thresholded gray matter mask in asl space
if ( ! -e ${out}_orig_masked_pve_1_to_asl_col_mc_m0_brain_mask.nii.gz || $force == 1 ) then
	set cmd = ( $FSLDIR/bin/fslmaths ${out}_orig_masked_pve_1_to_asl_col_mc_m0_brain )
	set cmd = ( $cmd -thr $gthresh -bin ${out}_orig_masked_pve_1_to_asl_col_mc_m0_brain_mask )								 
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
endif

#Do perfusion subtraction
if ( ! -e ${out}_asl_col_mc_perf.nii.gz || $force == 1 ) then
	
	#Split the volume
	set cmd = ( $FSLDIR/bin/fslsplit ${out}_asl_col_mc_tc -t )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
		
	#Get tags
	set cmd = ( $FSLDIR/bin/fslmerge -t ${out}_asl_col_mc_t `$FSLDIR/bin/imglob vol*[02468].*` )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
	
	#Get controls
	set cmd = ( $FSLDIR/bin/fslmerge -t ${out}_asl_col_mc_c `$FSLDIR/bin/imglob vol*[13579].*` )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
	
	#Delete volumes
	set cmd = ( rm vol*.nii.gz )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
	
	if ( $simple == 0 ) then
		#Do sinc subtraction by shifting the tags forward
		set cmd = ( $FSLDIR/bin/slicetimer -i ${out}_asl_col_mc_t -o ${out}_asl_col_mc_t_sinc )
		set cmd = ( $cmd --tglobal=1.0 )					   			   
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log	
		
		#Subtract to generate perfusion image
		set cmd = ( $FSLDIR/bin/fslmaths ${out}_asl_col_mc_c -sub ${out}_asl_col_mc_t_sinc )
		set cmd = ( $cmd ${out}_asl_col_mc_perf )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log	
	else
		#Simple subtraction only
		set cmd = ( $FSLDIR/bin/fslmaths ${out}_asl_col_mc_c -sub ${out}_asl_col_mc_t )
		set cmd = ( $cmd ${out}_asl_col_mc_perf )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log	
	endif
	
endif

#Calculate uncorrected cbf	
if ( ! -e ${out}_asl_col_mc_cbf_avg.nii.gz || ! -e ${out}_asl_col_mc_cbf_std.nii.gz \
		|| ! -e ${out}_asl_col_mc_cbf_var.nii.gz || $force == 1 ) then	
	set cmd = ( python ~/Documents/scripts/cbf_calc.py ${out}_asl_col_mc_perf.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc_m0.nii.gz ${out}_asl_col_mc_m0_brain_mask.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc $out4d $unfilt -mthresh $mthresh -sthresh $sthresh -col )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
endif

#Run a regression based partial volume correction
if ( ! -e ${out}_asl_col_mc_pvc${kernel}_dgm.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_dwm.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_mgm.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_mwm.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_mcsf.nii.gz || $force == 1 ) then
	set cmd = ( python ~/Documents/scripts/lin_pv_pasl.py ${out}_asl_col_mc_perf.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc_m0.nii.gz ${out}_asl_col_mc_m0_brain_mask.nii.gz )
	set cmd = ( $cmd ${out}_orig_masked_pve_0_to_asl_col_mc_m0_brain.nii.gz )
	set cmd = ( $cmd ${out}_orig_masked_pve_1_to_asl_col_mc_m0_brain.nii.gz )
	set cmd = ( $cmd ${out}_orig_masked_pve_2_to_asl_col_mc_m0_brain.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc_pvc${kernel} $nocsf -kernel $kernel )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log	
endif

#Calculate corrected cbf
if ( ! -e ${out}_asl_col_mc_pvc${kernel}_cbf_avg.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_cbf_std.nii.gz \
		|| ! -e ${out}_asl_col_mc_pvc${kernel}_cbf_var.nii.gz || $force == 1 ) then	
	set cmd = ( python ~/Documents/scripts/cbf_calc.py ${out}_asl_col_mc_pvc${kernel}_dgm.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc_pvc${kernel}_mgm.nii.gz )
	set cmd = ( $cmd ${out}_asl_col_mc_m0_brain_mask.nii.gz ${out}_asl_col_mc_pvc${kernel} )
	set cmd = ( $cmd $unfilt -mthresh $mthresh -sthresh $sthresh -col )
	echo $cmd |& tee -a $log
	$cmd |& tee -a $log		
endif

foreach cbf ( ${out}_asl_col_mc_pvc${kernel}_cbf_std ${out}_asl_col_mc_cbf_std \
			  ${out}_asl_col_mc_pvc${kernel}_cbf_var ${out}_asl_col_mc_cbf_var \
			  ${out}_asl_col_mc_pvc${kernel}_cbf_avg ${out}_asl_col_mc_cbf_avg )
	
	#Transform cbf to Freesurfer subject volume
	if ( ! -e ${cbf}_to_orig_masked.nii.gz || $force == 1 ) then
		set cmd = ( $FSLDIR/bin/applywarp --in=$cbf --ref=${out}_orig_masked )
		set cmd = ( $cmd --premat=${out}_asl_col_mc_m0_brain_to_orig_masked.mat )
		set cmd = ( $cmd --out=${cbf}_to_orig_masked.nii.gz --mask=${out}_orig_mask )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log		
	endif
	
	#Get reasonable output mask
	if (( $cbf == ${out}_asl_col_mc_pvc${kernel}_cbf_std || $cbf == ${out}_asl_col_mc_cbf_std ) \
			&& ( ! -e ${cbf}_to_orig_masked_outlier_mask.nii.gz || $force == 1)) then
		set mean_std = `fslstats ${cbf}_to_orig_masked -k ${out}_orig_masked_seg_1.nii.gz -m`
		set outlier_std = `echo "$mean_std * $roithresh" | bc -l`
		set cmd = ( $FSLDIR/bin/fslmaths ${cbf}_to_orig_masked -uthr $outlier_std -bin )
		set cmd = ( $cmd ${cbf}_to_orig_masked_outlier_mask )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log
	endif
										 		
	#Get stats from Freesurfer segmentations
	if ( ( $cbf == ${out}_asl_col_mc_pvc${kernel}_cbf_avg || $cbf == ${out}_asl_col_mc_cbf_avg ) \
			&& ( ! -e ${cbf}_stats.txt || $force == 1 )) then
		set mask = `echo ${cbf}_to_orig_masked | sed 's/avg/std/g'`
		set cmd = ( $FREESURFER_HOME/bin/mri_segstats --i ${cbf}_to_orig_masked.nii.gz )
		set cmd = ( $cmd --ctab $FREESURFER_HOME/FreeSurferColorLUT.txt --sum ${cbf}_stats.txt )
		set cmd = ( $cmd --seg ${SUBJECTS_DIR}/${subject}/mri/aparc+aseg.mgz )
		set cmd = ( $cmd --mask ${mask}_outlier_mask.nii.gz )
		echo $cmd |& tee -a $log
		$cmd |& tee -a $log	
	endif
		
	foreach hemi ( lh rh )
		
		#Transform to fsaverage space
		if ( ! -e ${cbf}_to_${hemi}_fsaverage.nii.gz || $force == 1 ) then
			set cmd = ( $FREESURFER_HOME/bin/mri_vol2surf --mov ${cbf}.nii.gz --cortex )
			set cmd = ( $cmd --trgsubject fsaverage --hemi $hemi )
			set cmd = ( $cmd --reg ${out}_asl_col_mc_m0_brain_to_orig_masked.reg )
			set cmd = ( $cmd --o ${cbf}_to_${hemi}_fsaverage.nii.gz --interp trilinear )
			echo $cmd |& tee -a $log
			$cmd |& tee -a $log		
		endif
		
		#Transform to fsaverage space with user specified smoothing
		if ( ! -e ${cbf}_to_${hemi}_fsaverage_fwhm_${fwhm}.nii.gz || $force == 1 ) then
			set cmd = ( $FREESURFER_HOME/bin/mri_vol2surf --mov ${cbf}.nii.gz --cortex )
			set cmd = ( $cmd --trgsubject fsaverage --hemi $hemi --surf-fwhm ${fwhm} )
			set cmd = ( $cmd --reg ${out}_asl_col_mc_m0_brain_to_orig_masked.reg )
			set cmd = ( $cmd --o ${cbf}_to_${hemi}_fsaverage_fwhm_${fwhm}.nii.gz --interp trilinear)
			echo $cmd |& tee -a $log
			$cmd |& tee -a $log														 
		endif
	end
end

echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "End Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log

